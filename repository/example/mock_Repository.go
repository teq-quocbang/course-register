// Code generated by mockery v2.12.2. DO NOT EDIT.

package example

import (
	context "context"
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	codetype "github.com/teq-quocbang/course-register/codetype"
	model "github.com/teq-quocbang/course-register/model"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *MockRepository) Create(ctx context.Context, data *model.Example) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Example) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateList provides a mock function with given fields: ctx, data
func (_m *MockRepository) CreateList(ctx context.Context, data []model.Example) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.Example) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrUpdate provides a mock function with given fields: ctx, data
func (_m *MockRepository) CreateOrUpdate(ctx context.Context, data *model.Example) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Example) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrUpdateList provides a mock function with given fields: ctx, data
func (_m *MockRepository) CreateOrUpdateList(ctx context.Context, data []model.Example) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.Example) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, data, unscoped
func (_m *MockRepository) Delete(ctx context.Context, data *model.Example, unscoped bool) error {
	ret := _m.Called(ctx, data, unscoped)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Example, bool) error); ok {
		r0 = rf(ctx, data, unscoped)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteList provides a mock function with given fields: ctx, data, unscoped
func (_m *MockRepository) DeleteList(ctx context.Context, data []model.Example, unscoped bool) error {
	ret := _m.Called(ctx, data, unscoped)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.Example, bool) error); ok {
		r0 = rf(ctx, data, unscoped)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, unscoped
func (_m *MockRepository) GetAll(ctx context.Context, unscoped bool) ([]model.Example, error) {
	ret := _m.Called(ctx, unscoped)

	var r0 []model.Example
	if rf, ok := ret.Get(0).(func(context.Context, bool) []model.Example); ok {
		r0 = rf(ctx, unscoped)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Example)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, unscoped)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetByID(ctx context.Context, id int64) (*model.Example, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Example
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Example); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Example)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByInterface provides a mock function with given fields: ctx, itf
func (_m *MockRepository) GetByInterface(ctx context.Context, itf interface{}) (*model.Example, error) {
	ret := _m.Called(ctx, itf)

	var r0 *model.Example
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *model.Example); ok {
		r0 = rf(ctx, itf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Example)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, itf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, search, paginator, conditions, order
func (_m *MockRepository) GetList(ctx context.Context, search string, paginator codetype.Paginator, conditions interface{}, order []string) ([]model.Example, int64, error) {
	ret := _m.Called(ctx, search, paginator, conditions, order)

	var r0 []model.Example
	if rf, ok := ret.Get(0).(func(context.Context, string, codetype.Paginator, interface{}, []string) []model.Example); ok {
		r0 = rf(ctx, search, paginator, conditions, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Example)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, string, codetype.Paginator, interface{}, []string) int64); ok {
		r1 = rf(ctx, search, paginator, conditions, order)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, codetype.Paginator, interface{}, []string) error); ok {
		r2 = rf(ctx, search, paginator, conditions, order)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetListByInterface provides a mock function with given fields: ctx, itf
func (_m *MockRepository) GetListByInterface(ctx context.Context, itf interface{}) ([]model.Example, error) {
	ret := _m.Called(ctx, itf)

	var r0 []model.Example
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) []model.Example); ok {
		r0 = rf(ctx, itf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Example)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, itf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, data
func (_m *MockRepository) Update(ctx context.Context, data *model.Example) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Example) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateList provides a mock function with given fields: ctx, data
func (_m *MockRepository) UpdateList(ctx context.Context, data []model.Example) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.Example) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRepository creates a new instance of MockRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t testing.TB) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
